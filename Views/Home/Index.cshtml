@model mms_2025_bac_dev.Models.BACTrackerViewModel
@{
    ViewData["Title"] = "Blood Alcohol Content Tracker";
}

<h1 class="mb-4 text-center">@ViewData["Title"]</h1>

<div id="app-container">
    <!-- User Profile Section - Shown when no profile exists -->
    <div id="userProfileSection" class="card mb-4" style="display: none;">
        <div class="card-header">
            <h5 class="mb-0">Your Profile</h5>
        </div>
        <div class="card-body">
            <form id="profileForm">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="gender" class="form-label">Gender</label>
                        <select id="gender" class="form-select" required>
                            <option value="">Select gender</option>
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                        </select>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="weight" class="form-label">Weight</label>
                        <div class="input-group">
                            <input type="number" id="weight" class="form-control" min="1" step="0.1" required placeholder="Enter your weight">
                            <select id="weightUnit" class="form-select" style="max-width: 100px;">
                                <option value="lb">lb</option>
                                <option value="kg">kg</option>
                                <option value="stone">stone</option>
                            </select>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary mt-2">Save Profile</button>
            </form>
        </div>
    </div>

    <!-- BAC Display Section - Shown when profile exists -->
    <div id="bacDisplaySection" class="card text-center mb-4" style="display: none;">
        <div class="card-header">
            <h5 class="mb-0">Current Blood Alcohol Content (BAC)</h5>
        </div>
        <div class="card-body">
            <h1 id="bacValue" class="display-4">0.000%</h1>
            <p id="bacTime" class="text-muted">Estimated time until 0.00%: <span id="timeToZero">Now</span></p>
            <button id="clearDataBtn" class="btn btn-danger mt-3">Clear Data & Start New Session</button>
        </div>
    </div>

    <!-- Add Beverage Section - Shown when profile exists -->
    <div id="addBeverageSection" class="card mb-4" style="display: none;">
        <div class="card-header">
            <h5 class="mb-0">Add Beverage</h5>
        </div>
        <div class="card-body">
            <form id="beverageForm">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <div class="input-group">
                            <input type="number" id="amount" class="form-control" min="0.1" step="0.1" required>
                            <select id="volumeUnit" class="form-select" style="max-width: 100px;">
                                <option value="oz">fl. oz.</option>
                                <option value="ml">mL</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="abv" class="form-label">ABV%</label>
                        <input type="number" id="abv" class="form-control" min="0.1" max="100" step="0.1" required>
                    </div>
                    <div class="col-md-4 mb-3">
                        <label for="consumedTime" class="form-label">Time Consumed</label>
                        <input type="text" id="consumedTime" class="form-control" required>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-12">
                        <label class="form-label">Quick Add Standard Drinks</label>
                        <div class="d-flex gap-2">
                            <button type="button" id="addBeerBtn" class="btn btn-outline-primary btn-standard-drink">
                                üç∫ Beer<br>(12oz, 5%)
                            </button>
                            <button type="button" id="addWineBtn" class="btn btn-outline-danger btn-standard-drink">
                                üç∑ Wine<br>(4oz, 15%)
                            </button>
                            <button type="button" id="addTequilaBtn" class="btn btn-outline-warning btn-standard-drink">
                                ü•É TEQUILA<br>(2oz, 35%)
                            </button>
                        </div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary">Add Beverage</button>
            </form>
        </div>
    </div>

    <!-- Beverage List Section - Shown when profile exists and beverages added -->
    <div id="beverageListSection" class="card" style="display: none;">
        <div class="card-header">
            <h5 class="mb-0">Beverages Consumed</h5>
        </div>
        <div class="card-body">
            <p id="noBeverages" class="text-center text-muted">No beverages added yet.</p>
            <div class="table-responsive" id="beverageTableContainer" style="display: none;">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Time</th>
                            <th>Amount</th>
                            <th>ABV%</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="beverageList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function() {
            // Initialize UI
            initializeApp();
            
            // Initialize flatpickr for datetime input
            if (typeof flatpickr !== 'undefined') {
                flatpickr("#consumedTime", {
                    enableTime: true,
                    dateFormat: "Y-m-d H:i",
                    defaultDate: new Date(),
                    time_24hr: false,
                    disableMobile: true, // Prevents using the mobile native picker
                    allowInput: true, // Allows direct input in the field
                    clickOpens: true, // Ensures clicking on the input opens the picker
                    onReady: function(selectedDates, dateStr, instance) {
                        // Force initialization with current date/time on ready
                        instance.setDate(new Date());
                    },
                    onChange: function(selectedDates, dateStr, instance) {
                        // Ensure valid date is always set
                        if (selectedDates.length === 0) {
                            instance.setDate(new Date());
                        }
                    }
                });
            } else {
                // Fallback if flatpickr is not available
                var now = new Date();
                var formattedDate = now.toLocaleString();
                $("#consumedTime").val(formattedDate);
            }
            
            // Event handlers for standard drink buttons
            $('#addBeerBtn').on('click', function() {
                $('#amount').val('12');
                $('#volumeUnit').val('oz');
                $('#abv').val('5');
                
                // Set current time
                if (typeof flatpickr !== 'undefined') {
                    document.querySelector("#consumedTime")._flatpickr.setDate(new Date());
                } else {
                    $("#consumedTime").val(new Date().toLocaleString());
                }
                
                // Optionally auto-submit the form
                $('#beverageForm').trigger('submit');
            });
            
            $('#addWineBtn').on('click', function() {
                $('#amount').val('4');
                $('#volumeUnit').val('oz');
                $('#abv').val('15');
                
                // Set current time
                if (typeof flatpickr !== 'undefined') {
                    document.querySelector("#consumedTime")._flatpickr.setDate(new Date());
                } else {
                    $("#consumedTime").val(new Date().toLocaleString());
                }
                
                // Optionally auto-submit the form
                $('#beverageForm').trigger('submit');
            });
            
            $('#addTequilaBtn').on('click', function() {
                $('#amount').val('2');
                $('#volumeUnit').val('oz');
                $('#abv').val('35');
                
                // Set current time
                if (typeof flatpickr !== 'undefined') {
                    document.querySelector("#consumedTime")._flatpickr.setDate(new Date());
                } else {
                    $("#consumedTime").val(new Date().toLocaleString());
                }
                
                // Optionally auto-submit the form
                $('#beverageForm').trigger('submit');
            });
            
            // Event handler for profile form submission
            $('#profileForm').on('submit', function(e) {
                e.preventDefault();
                
                const profile = {
                    gender: $('#gender').val(),
                    weight: parseFloat($('#weight').val()),
                    weightUnit: $('#weightUnit').val()
                };
                
                localStorageService.saveUserProfile(profile)
                    .then(() => {
                        console.log('Profile saved successfully');
                        updateUIBasedOnProfile(true);
                        updateBAC();
                    })
                    .catch(err => {
                        console.error('Error saving profile:', err);
                        alert('Failed to save profile. Please try again.');
                    });
            });
            
            // Event handler for beverage form submission
            $('#beverageForm').on('submit', function(e) {
                e.preventDefault();
                
                let consumedTime;
                if (typeof flatpickr !== 'undefined') {
                    consumedTime = document.querySelector("#consumedTime")._flatpickr.selectedDates[0];
                } else {
                    consumedTime = new Date($('#consumedTime').val());
                }
                
                const beverage = {
                    id: new Date().getTime(),
                    amount: parseFloat($('#amount').val()),
                    volumeUnit: $('#volumeUnit').val(),
                    abv: parseFloat($('#abv').val()),
                    consumedTime: consumedTime
                };
                
                localStorageService.addBeverage(beverage)
                    .then(() => {
                        console.log('Beverage added successfully');
                        $('#amount').val('');
                        $('#abv').val('');
                        
                        // Update consumed time to now
                        if (typeof flatpickr !== 'undefined') {
                            document.querySelector("#consumedTime")._flatpickr.setDate(new Date());
                        } else {
                            $('#consumedTime').val(new Date().toLocaleString());
                        }
                        
                        loadBeverages();
                        updateBAC();
                    })
                    .catch(err => {
                        console.error('Error adding beverage:', err);
                        alert('Failed to add beverage. Please try again.');
                    });
            });
            
            // Event handler for clear data button
            $('#clearDataBtn').on('click', function() {
                if (confirm('Are you sure you want to clear all data and start a new session?')) {
                    localStorageService.clearAllData()
                        .then(() => {
                            console.log('Data cleared successfully');
                            updateUIBasedOnProfile(false);
                        })
                        .catch(err => {
                            console.error('Error clearing data:', err);
                            alert('Failed to clear data. Please try again.');
                        });
                }
            });
            
            // Initialize the UI based on stored data
            function initializeApp() {
                localStorageService.getUserProfile()
                    .then(profile => {
                        const hasProfile = !!profile;
                        updateUIBasedOnProfile(hasProfile);
                        
                        if (hasProfile) {
                            // Fill in profile form for reference
                            $('#gender').val(profile.gender);
                            $('#weight').val(profile.weight);
                            $('#weightUnit').val(profile.weightUnit);
                            
                            // Load beverages and update BAC
                            loadBeverages();
                            
                            // Set up regular BAC updates
                            setInterval(updateBAC, 60000);
                            console.log("BAC update interval set - will refresh every minute");
                            
                            // Do initial BAC calculation
                            updateBAC();
                        }
                    })
                    .catch(err => {
                        console.error('Error initializing app:', err);
                        alert('Error initializing the application. Please refresh the page and try again.');
                    });
            }
            
            // Update UI visibility based on profile existence
            function updateUIBasedOnProfile(hasProfile) {
                if (hasProfile) {
                    $('#userProfileSection').hide();
                    $('#bacDisplaySection').show();
                    $('#addBeverageSection').show();
                    $('#beverageListSection').show();
                } else {
                    $('#userProfileSection').show();
                    $('#bacDisplaySection').hide();
                    $('#addBeverageSection').hide();
                    $('#beverageListSection').hide();
                }
            }
            
            // Load and display beverages
            function loadBeverages() {
                localStorageService.getAllBeverages()
                    .then(beverages => {
                        const $beverageList = $('#beverageList');
                        $beverageList.empty();
                        
                        if (beverages.length === 0) {
                            $('#noBeverages').show();
                            $('#beverageTableContainer').hide();
                            return;
                        }
                        
                        $('#noBeverages').hide();
                        $('#beverageTableContainer').show();
                        
                        // Sort beverages by consumed time (newest first)
                        beverages.sort((a, b) => {
                            const timeA = new Date(a.consumedTime);
                            const timeB = new Date(b.consumedTime);
                            return timeB - timeA;
                        });
                        
                        // Add each beverage to the table
                        beverages.forEach(beverage => {
                            const consumedTime = new Date(beverage.consumedTime);
                            const formattedTime = consumedTime.toLocaleString();
                            
                            const $row = $('<tr>');
                            $row.append($('<td>').text(formattedTime));
                            $row.append($('<td>').text(`${beverage.amount} ${beverage.volumeUnit}`));
                            $row.append($('<td>').text(`${beverage.abv}%`));
                            
                            const $deleteBtn = $('<button>')
                                .addClass('btn btn-sm btn-danger')
                                .text('Delete')
                                .on('click', function() {
                                    deleteBeverage(beverage.id);
                                });
                            
                            $row.append($('<td>').append($deleteBtn));
                            $beverageList.append($row);
                        });
                    })
                    .catch(err => {
                        console.error('Error loading beverages:', err);
                    });
            }
            
            // Delete a beverage
            function deleteBeverage(id) {
                localStorageService.deleteBeverage(id)
                    .then(() => {
                        console.log('Beverage deleted successfully');
                        loadBeverages();
                        updateBAC();
                    })
                    .catch(err => {
                        console.error('Error deleting beverage:', err);
                    });
            }
            
            // Update BAC display
            function updateBAC() {
                console.log('Updating BAC calculation at', new Date().toISOString());
                
                Promise.all([
                    localStorageService.getUserProfile(),
                    localStorageService.getAllBeverages()
                ]).then(([userProfile, beverages]) => {
                    if (!userProfile) {
                        console.warn('Cannot calculate BAC: No user profile found');
                        return;
                    }
                    
                    const currentBAC = bacCalculationService.calculateBAC(userProfile, beverages);
                    const timeToZero = bacCalculationService.estimateTimeToZero(currentBAC, beverages);
                    const bacLevel = bacCalculationService.getBACLevelClass(currentBAC);
                    const formattedBAC = bacCalculationService.formatBAC(currentBAC);
                    
                    console.log('BAC calculation results:', {
                        bac: formattedBAC,
                        timeToZero: timeToZero,
                        bacLevel: bacLevel
                    });
                    
                    // Update the UI
                    $('#bacValue').text(formattedBAC + '%');
                    $('#timeToZero').text(timeToZero);
                    
                    // Update color class
                    $('#bacValue').removeClass('text-success text-warning text-danger').addClass(bacLevel);
                    
                    // Add pulse animation
                    $('#bacValue').addClass('animate__animated animate__pulse');
                    setTimeout(function() {
                        $('#bacValue').removeClass('animate__animated animate__pulse');
                    }, 1000);
                    
                    // Update the time consumed field to current time for convenience
                    if (typeof flatpickr !== 'undefined') {
                        const consumedTimePicker = document.querySelector("#consumedTime")._flatpickr;
                        consumedTimePicker.setDate(new Date());
                    } else {
                        const now = new Date();
                        const formattedDate = now.toLocaleString();
                        $("#consumedTime").val(formattedDate);
                    }
                }).catch(err => {
                    console.error('Error updating BAC:', err);
                });
            }
        });
    </script>
}